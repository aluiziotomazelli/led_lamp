[1/12] Performing build step for 'bootloader'
[1/1] cd /home/alemao/dev/lamp/lamp/build/bootloader/esp-idf/esptool_py && /home/alemao/.espressif/python_env/idf5.4_py3.13_env/bin/python /home/alemao/dev/esp-idf-v5.4.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/alemao/dev/lamp/lamp/build/bootloader/bootloader.bin
Bootloader binary size 0x6580 bytes. 0xa80 bytes (9%) free.
[2/12] No install step for 'bootloader'
[3/12] Completed 'bootloader'
[4/12] Building C object esp-idf/encoder/CMakeFiles/__idf_encoder.dir/encoder.c.obj
[5/12] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[6/12] Linking C static library esp-idf/encoder/libencoder.a
[7/12] Linking C static library esp-idf/input_integrator/libinput_integrator.a
[8/12] Linking C static library esp-idf/main/libmain.a
[9/12] Generating ld/sections.ld
[10/12] Linking CXX executable app-template.elf
[11/12] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/alemao/dev/lamp/lamp/build/app-template.bin
[12/12] cd /home/alemao/dev/lamp/lamp/build/esp-idf/esptool_py && /home/alemao/.espressif/python_env/idf5.4_py3.13_env/bin/python /home/alemao/dev/esp-idf-v5.4.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/alemao/dev/lamp/lamp/build/partition_table/partition-table.bin /home/alemao/dev/lamp/lamp/build/app-template.bin
app-template.bin binary size 0x2a6a0 bytes. Smallest app partition is 0x100000 bytes. 0xd5960 bytes (83%) free.
